#!/usr/bin/env bash
# This file might be not executable as is (for example when run in Termux on
# Android). This file is best run as: bash run
# (after changing into this iotempower directory)
#
# At first start, it installs the local iotempower-environment
#
# Author: ulno
# Create date: 2017-05-17
#
# if parameters are given and the first is "exec", iotempower will execute
# the rest of the parameters as command in iotempower environment

function welcome() {
cat << EOF
IoTempower
==========

Your friendly and affordable Internet of Things environment.
More at http://github.com/iotempire/iotempower

EOF
}

function usage() {
welcome
cat << EOF
Syntax: iot [command command_parameters]

The following commands are possible:

- welcome:
  Print the welcome message again.
  
- exec [cmd+arguments]:
  Execute cmd inside the iotempower environment. Check out all the helper
  scripts in iotempower/bin

- upgrade:
  Update current version iotempower with newest version from git repository.

- help [cmd]:
  Display help on a specific command given in cmd. If cmd is empty,
  show this help.
  After entering the IoTempower environment, this help is also available just
  via typing uhelp. Calling uhelp with no parameters will list all available
  commands.

- [command]:
  Execute iot_[command] with the given parameters.


If no command is given, execute the bash shell in the IoTempower environment.
The first time this is run, external dependencies are downloaded and
installed here too.

Also try out the following commands for device management (add help to each of
them to get a longer description):
- initialize (reflashing device)
- deploy (update a device remotely)
- console_serial show serial output of connected node

Commands for interacting via mqtt (node topic is added when in node folder):
- mqtt_all (show all mqtt messages_
- mqtt_listen (listen for a specific topic)
- mqtt_send (directly send payload to specific topic)
- mqtt_action (react on specific payload on specific mqtt topic)
EOF
}

function check_files() {
    for file in "$@"; do
        if [ ! -e "$file" ]; then
            echo "Can't find $file."
            return 1
        fi
    done
    return 0
}


function check_root() {
    if [ -e "$IOTEMPOWER_ROOT/lib/shell_starter/iotempower.bash" ]; then
        cd "$IOTEMPOWER_ROOT"
    fi
    # else we should assume that we were started from the root-directory
    #echo -n "Checking now that we are in the iotempower root directory. "
    check_files "lib/shell_starter/iotempower.bash" \
        "bin/shebang_run" \
        "etc/iotempower.conf.example"
    if [ $? -ne 0 ]; then
        echo
        echo "Cannot find IoTempower files."
        echo "Stopping now."
        return 1
    fi

    # Yes, found them.
    echo
    return 0
}

function check_install() {
    # Check if all local directories and paths have been set up
    check_files .local/bin/shebang_run .local/vp/bin/activate
    return $?
}

function install() {
    echo "Installing now."
    echo
    bash "$IOTEMPOWER_ROOT/bin/iot_install"
    # run upgrade should not be necessary anymore - TODO: verify
}

function run() {
    case "$1" in
        welcome)
            welcome
            ;;
        help | -h | --help)
            shift
            if [[ "$1" ]]; then
                exec "$IOTEMPOWER_LOCAL/bin/iot_help" "$@"
            else
                usage
            fi
            ;;
        "")
            welcome
            exec bash --noprofile --norc # do not read again any of the environment
            ;;
        exec | x | run | -x | -c | --exec)
            shift
            exec "$@"
            ;;
        *)
            # try to execute that with iot_ prefix
            cmd="$IOTEMPOWER_LOCAL/bin/iot_$1"
            if [[ -x "$cmd" ]]; then
                shift
                exec "$cmd" "$@"
            else
                usage
            fi
    esac
}


######## Main #########
current_path="$(pwd)" # save to restore later
if check_root; then
    export IOTEMPOWER_ROOT=$(realpath "$(pwd)")
    source "$IOTEMPOWER_ROOT/lib/shell_starter/iotempower.bash" \
        || { echo "Can't read configuration. Aborting."; exit 1; }
    check_install
    installed=$?
    cd "$current_path" # back to where we have been called
    # If installed is detected or any argument is given
    if [ $installed -eq 0 ] || [ $# -gt 0 ]; then
        run "$@"
    else
        # check if we are in iotempower docker
        if [[ -d "$HOME/data"  && -e "$HOME/iot-local-docker.tar.xz"  ]]; then
            echo "Initializing container on first run..."
            cd "$HOME/data"
            tar xaf "$HOME/iot-local-docker.tar.xz" --no-same-owner --no-same-permissions # permission fix is also for MacOS
            chmod 755 /iot/data/repo/.local/bin/shebang_run # fix trouble on MacOS
            cd "$current_path" # back to where we have been called
            echo "... done."
            echo
            run "$@"
        else
            if install; then # if it failed, try to install first
                run "$@"
            fi
        fi
    fi
fi
