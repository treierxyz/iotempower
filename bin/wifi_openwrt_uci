#!/usr/bin/env bash
if [[ $# -gt 4 || "$*" = "help" || "$*" = "-h" || "$*" = "--help" ]]; then
cat << EOF

this must be called from a node directory (or one of its parent system
directories) and reads it will set the gateway wifi configurartion of that system (SSID, password, gateway IP).

It rebuilds firmwares for the affected nodes and remotely flashes
the respected nodes.

If credentials are given, it over writes the global wifi configuration.
Else it the gateway configuration is set to the default global values

If you are running all systems from same gateway, you can also change the credentials by creating an iotempower.conf file in iot/etc/
Copy the iotempower.conf.example file, (delete the .example extension) and adjust the values.

EOF
exit 1
fi

# TODO: add option to specify input file with list of specific nodes to deploy

[ "$IOTEMPOWER_ACTIVE" = "yes" ] || { echo "IoTempower not active, aborting." 1>&2;exit 1; }
#check if current router IP is correct
#source $IOTEMPOWER_ROOT/bin/check_router_ip
# Print it for verification
#echo "Router IP: $ROUTER_IP"
if [ -z "$ROUTER_IP" ]; then
    exit 1
fi

# Prompt the user for SSID and password
#source $IOTEMPOWER_ROOT/bin/wifi_credentials_temp
source $IOTEMPOWER_ROOT/etc/wifi_credentials

# Check if user has a public SSH key, if not create one
if ls ~/.ssh/*.pub 1> /dev/null 2>&1 ; then 
    ssh_pub_key=$(ls ~/.ssh/*.pub | head -n 1 | xargs cat)+\n
else
    echo "Public SSH key not found. Genarating a new SSH key"
    ssh-keygen -o
    ssh_pub_key=$(ls ~/.ssh/*.pub | head -n 1 | xargs cat)+\n
fi

#get routers inital ip from check_router_ip
hostname="root@$ROUTER_IP"

ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $hostname << EOF 
#echo "cpying your public key to the router authorized.keys for passwordless ssh loging..."
echo $ssh_pub_key >> /etc/dropbear/authorized_keys

 if ping -c 4 8.8.8.8 > /dev/null; then
    echo "Router is connected to the internet."
    break
else
    echo" The Router must have internet connection to run update"
    echo "Please connect to the Internet via ETHERNET cable on WAN port"
    exit 1
fi
opkg update

# Install Mosquitto and its SSL libraries, luci-app-mosquitto, and the USB network drivers
opkg install mosquitto-ssl libmosquitto-ssl luci-app-mosquitto kmod-usb-net-rndis 
#kmod-usb-net-cdc-ether usbmuxd libimobiledevice usbutils kmod-usb-net

###########################
# You can potencially Replace Dropbear to OpenSSH + SFTP by uncommenting the lines bellow
#opkg install openssh-server openssh-sftp-server
#uci set dropbear.@dropbear[0].Port=2222
#uci commit dropbear
#/etc/init.d/dropbear restart
#sed -i 's/^#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
#mkdir /root/.ssh/
#cp /etc/dropbear/authorized_keys /root/.ssh/
#/etc/init.d/sshd enable
#/etc/init.d/sshd restart
#########################

# Enable Mosquitto to start on boot
/etc/init.d/mosquitto enable

# Set the options in the 'owrt' section
uci set mosquitto.owrt=owrt
uci set mosquitto.owrt.use_uci='1'

# Set the options in the 'mosquitto' section
uci set mosquitto.mosquitto=mosquitto
uci set mosquitto.mosquitto.allow_anonymous='1'

# Set the options in the 'persistence' section
uci set mosquitto.persistence=persistence
uci set mosquitto.persistence.persistence='0'

# Check if a Mosquitto listener already exists
if ! uci show mosquitto | grep -q '=listener'; then
    # If no listener exists, add one
    uci add mosquitto listener
    # Set the options in the new listener section
    uci set mosquitto.@listener[0].port='1883'
    uci set mosquitto.@listener[0].protocol='mqtt'
fi

# Save the changes
uci commit mosquitto

# Start Mosquitto
/etc/init.d/mosquitto start

uci set wireless.radio0.disabled='0'
uci set wireless.default_radio0.ssid="$IOTEMPOWER_AP_NAME"
uci set wireless.default_radio0.encryption="psk2"
uci set wireless.default_radio0.key="$IOTEMPOWER_AP_PASSWORD"
uci commit wireless
wifi reload

# Configure the new USB tethering interface
uci set network.usb=interface
uci set network.usb.proto='dhcp'
uci set network.usb.ifname='eth1'
uci commit network

# Assign the firewall zone for the usb interface to wan and wan6
uci add_list firewall.@zone[1].network='usb'
uci add_list firewall.@zone[2].network='usb'
uci commit firewall

echo "Setting wifi credentials"
uci set network.lan.ipaddr="$IOTEMPOWER_AP_IP"
uci commit network
echo "Setting network ip to $IOTEMPOWER_AP_IP and restarting..."
echo "WiFi configuration has been written to uci config file"
( sleep 5 ; /etc/init.d/network restart ) &

EOF

 if [[ $? -eq 0 ]]; then
        # Write settings to the system.conf files
      echo "Please restart the router to apply the changes and connect to the new wifi network $IOTEMPOWER_AP_IP"
    else
        echo "wifi_openwrt_uci command failed. Aborting."
        exit 1
    fi
# TODO deactivate dropbear

